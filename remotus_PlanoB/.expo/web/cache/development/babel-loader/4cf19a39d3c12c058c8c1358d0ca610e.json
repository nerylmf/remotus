{"ast":null,"code":"export var UpdateEventType;\n\n(function (UpdateEventType) {\n  UpdateEventType[\"UPDATE_AVAILABLE\"] = \"updateAvailable\";\n  UpdateEventType[\"NO_UPDATE_AVAILABLE\"] = \"noUpdateAvailable\";\n  UpdateEventType[\"ERROR\"] = \"error\";\n})(UpdateEventType || (UpdateEventType = {}));","map":{"version":3,"sources":["../src/Updates.types.ts"],"names":[],"mappings":"AAEA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB,EAAA,eAAA,CAAA,kBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,eAAA,CAAA,qBAAA,CAAA,GAAA,mBAAA;AACA,EAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAJD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B","sourcesContent":["import Constants from 'expo-constants';\n\nexport enum UpdateEventType {\n  UPDATE_AVAILABLE = 'updateAvailable',\n  NO_UPDATE_AVAILABLE = 'noUpdateAvailable',\n  ERROR = 'error',\n}\n\n// TODO(eric): move source of truth for manifest type to this module\nexport type ClassicManifest = typeof Constants.manifest;\nexport type Manifest = ClassicManifest | typeof Constants.manifest2;\n// modern manifest type is intentionally not exported, since the plan is to call it just \"Manifest\" in the future\n\nexport type UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\nexport type UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\nexport type Listener<E> = (event: E) => void;\n\nexport type UpdateEvent =\n  | { type: UpdateEventType.NO_UPDATE_AVAILABLE }\n  | { type: UpdateEventType.UPDATE_AVAILABLE; manifest: Manifest }\n  | { type: UpdateEventType.ERROR; message: string };\n\nexport type LocalAssets = { [remoteUrl: string]: string };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}